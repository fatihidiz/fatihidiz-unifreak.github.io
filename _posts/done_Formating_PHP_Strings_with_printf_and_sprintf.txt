Formatting PHP Strings with printf and sprintf
使用 php printf() 和 sprintf() 格式化字符串

Like many other languages, PHP features the versatile printf() and sprintf() functions that you can use to format strings in many different ways. These functions are handy when you need convert data between different formats — either to make it easy for people to read, or for passing to another program.
和其他许多编程语言一样, PHP 也有功能强大的 printf() 和 sprintf() 函数, 它们提供了很多格式化字符串的方式. 当你想要某些数据更易度, 或者需要传递数据给其他程式的时候, 这两个函数很有用.

PHP features many other functions to format strings in specific ways — for example, the date() function is ideal for formatting date strings. However, printf() and sprintf() are great for general-purpose formatting.
PHP 也有许多专门用途的格式化字符串的函数 - 比如 date() 函数, 适合用于格式化日期字符串. 而 printf() 和 sprintf() 则适合更为通用的格式化.

In this tutorial you look at how to work with printf() and sprintf() to format strings.
这篇教程就会教你如何使用 printf() 和 sprintf() 来格式化字符串.

A simple printf() example
一个简单的 printf() 示例

The easiest way to understand printf() is to look at an example. The following code displays a string containing 2 numbers:
了解 printf() 的最简单方式就是通过示例. 下面这个例子打印一个包含了两个数字的字符串:

// Displays "Australia comprises 6 states and 10 territories"
printf( "Australia comprises %d states and %d territories", 6, 10 );
// 打印 "Australia comprises 6 states and 10 territories"
printf( "Australia comprises %d states and %d territories", 6, 10 );

Notice how the first %d in the string is replaced with the first argument after the string (6), while the second %d is replaced with the second argument (10). Here's how it works:
注意这个字符串在被打印出的时候, 第一个 %d 被第二个参数(6)替换, 第二个 %d 则被第三个参数(10)替换. 其工作原理即:

    The first argument is always a string, and is called the format string. The format string contains regular text, as well as some optional format specifiers (the %ds in this example).
    第一个参数必须是一个字符串, 我们称之为目标字符串. 目标字符串包含普通的字符, 和一些可选的格式说明符 (比如 %d)

    Each format specifier begins with a % (percent) sign. It takes an additional argument after the format string, formats the argument in a certain way, and inserts the result into the final string, which is then displayed in the Web page.
    所有格式说明符都以 % 开头. 它按对应的顺序以特定方式格式化目标字符串之后的参数, 然后将其插入到最终的字符串中, 并显示到网页.

To specify a literal percent character, write %%.
如果想要打印 % 符, 使用 %%.

Type specifiers
格式说明符

The example above uses the %d format specifier. This formats an argument as a signed decimal integer. The 'd' is known as a type specifier, and printf() supports a wide range of them. Here's a full list of type specifiers:
上面那个例子使用的 %d 这个格式说明符, 会将参数按照有符号十进制数字格式化. 这个 'd' 被称为类型说明符. printf() 支持很多类型说明符. 下面是类型说明符的完整列表:

b
    Format the argument as a binary integer (e.g. 10010110)
    将参数作为二进制数字(如 10010110)格式化
c
    Format the argument as a character with the argument's ASCII value
    将参数作为 ASCII 码值格式化为对应的字符
d
    Format the argument as a signed decimal integer
    将参数作为有符号十进制数字格式化
e
    Format the argument in scientific notation (e.g. 1.234e+3)
    将参数作为科学计数法(如 1.234e+3)格式化
f
    Format the argument as a floating-point number using the current locale settings (e.g. in France a comma is used for the decimal point)
    将参数作为浮点数字, 并且使用地区设定(如在法国, 逗号被用作小数点)格式化
F
    As above, but ignore the locale settings
    和上面相同, 不过不使用地区设定
o
    Format the argument as an octal integer
    将参数作为八进制数字格式化
s
    Format the argument as a string
    将参数作为字符串格式化
u
    Format the argument as an unsigned decimal integer
    将参数作为无符号十进制数字格式化
x
    Format the argument as a lowercase hexadecimal integer (e.g. 4fdf87)
    将参数作为消协十六进制数字(如 4fdf87)格式化
X
    Format the argument as an uppercase hexadecimal integer (e.g. 4FDF87)
    将参数作为答谢十六进制数字(如 4FDF87)格式化

Here's a simple example of type specifiers in action:
下面是一些类型说明符的示例:

printf( "Here's the number %s as a float (%f), a binary integer (%b), an octal integer (%o), and a hex integer (%x).", 543.21, 543.21, 543.21, 543.21, 543.21 );

This code displays:
这段代码会输出:

Here's the number 543.21 as a float (543.210000), a binary integer (1000011111), an octal integer (1037), and a hex integer (21f).

Sign specifier
符号说明符

Ordinarily, printf() only puts a sign symbol in front of negative numbers, not positive numbers:
默认情况下, printf() 只会在负数前加正负符号:

printf( "%d", 36 );   // Displays "36"
printf( "%d", -36 );  // Displays "-36"
printf( "%d", 36 );   // 输出 "36"
printf( "%d", -36 );  // 输出 "-36"

If you'd rather printf() also put a + symbol in front of positive numbers, you can add the sign specifier, +, before the type specifier:
如果你也想让 printf() 在正数前加符号, 可以在类型说明符前指定一个符号说明符(+):

printf( "%+d", 36 );   // Displays "+36"
printf( "%+d", -36 );  // Displays "-36"
printf( "%+d", 36 );   // 输出 "+36"
printf( "%+d", -36 );  // 输出 "-36"

Padding
填充

printf() lets you pad out an argument value to a fixed width. You can use any character you like for the padding, and you can pad to the left or the right of the value. Padding is useful for adding leading zeroes to numbers, and for right-aligning strings.
printf() 允许你填充目标字符串到指定的长度. 你可以使用任何字符做填充字符, 也可以指定填充左边还是右边. 如果你希望在数字前补 0 或让字符串右对齐, 填充就派上用场了.

To add padding, insert a padding specifier between the '%' character and the type specifier. A padding specifier takes the format:
通过在 % 前面插入一个填充说明符来指定填充规则. 填充说明符使用以下格式:

<padding character><width>
<填充符><宽度>

    <padding character> can be a zero or a space. If you miss it out, spaces are used. If you want to pad using a different character, write an apostrophe (') followed by the character to use.
    <填充符> 可以是 0 或空格. 如果你不指定则默认使用空格. 如果你想要指定其他填充符, 需在它之前加一个 (') 字符.
    <width> is the number of characters to pad the value out to. A positive number adds padding to the left; a negative number adds padding to the right.
    <宽度> 即想要填充到的宽度. 整数代表左填充, 负数代表右填充.

    Here are some padding examples:
    这是些填充说明符示例:

    printf( "%04d", 12 );          // Displays "0012"
    printf( "%04d", 1234 );        // Displays "1234"
    printf( "%04d", 12345 );       // Displays "12345"
    printf( "% 10s", "Hello" );    // Displays "     Hello"
    printf( "%10s", "Hello" );     // Displays "     Hello"
    printf( "%'*10s", "Hello" );   // Displays "*****Hello"
    printf( "%'*-10s", "Hello" );  // Displays "Hello*****"
    printf( "%04d", 12 );          // 输出 "0012"
    printf( "%04d", 1234 );        // 输出 "1234"
    printf( "%04d", 12345 );       // 输出 "12345"
    printf( "% 10s", "Hello" );    // 输出 "     Hello"
    printf( "%10s", "Hello" );     // 输出 "     Hello"
    printf( "%'*10s", "Hello" );   // 输出 "*****Hello"
    printf( "%'*-10s", "Hello" );  // 输出 "Hello*****"

    Notice that, in the 3rd example, the padding specifier doesn't truncate the value to 4 characters. Padding specifiers only add characters.
    留意第三个示例, 填充说明符并不会导致目标字符串被截断为 4 个字符. 填充只会在必要处增加字符

Number precision
数字精度

    When using the f or F type specifier to format floats, PHP defaults to a precision of 6 decimal places:
    当使用 f 或者 F 类型说明符格式化浮点数时, PHP 默认会取到小数点后面 6 位:

    printf( "%f", 123.456 );  // Displays "123.456000"
    printf( "%f", 123.456 );  // 输出 "123.456000"

    To specify a different precision, you can use a precision specifier. This is a dot (.) followed by the number of decimal places to use, and it goes right before the type specifier. For example:
    如果要指定不同的精度, 就要用到精度说明符了. 精度说明符是一个 (.) 号后跟一个数字, 并应放到类型说明符之前. 如:

    printf( "%.2f", 123.456 );  // Displays "123.46"
    printf( "%.10f", 123.456 );  // Displays "123.4560000000"
    printf( "%.0f", 123.456 );  // Displays "123"
    printf( "%.2f", 123.456 );  // 输出 "123.46"
    printf( "%.10f", 123.456 );  // 输出 "123.4560000000"
    printf( "%.0f", 123.456 );  // 输出 "123"

    If you use a padding specifier with a precision specifier then printf() pads the entire value, including the decimal point and decimal digits, to the specified length:
    如果你既指定了填充说明符又指定了精度说明符, printf() 会将整个数字(包括整数和小数部分)填充到指定长度:

    printf( "%08.2f", 123.456 );  // Displays "00123.46"
    printf( "%08.2f", 123.456 );  // 输出 "00123.46"

    If you use a precision specifier with the s type specifier then printf() truncates the string value to the specified number of characters:
    如果你同时使用 s 类型说明符和精度说明符, printf() 会截断目标字符串到指定的长度:

    printf( "%.2s", "Hello" );  // Displays "He"
    printf( "%.2s", "Hello" );  // 输出 "He"

Argument swapping
参数交换

    By default, the first format specifier in the format string is used with the first argument after the format string, the second format specifier is used with the second argument, and so on. However, you can change this ordering if you like.
    默认情况下, 目标字符串的第一个格式说明符会格式化该字符串后的第一个参数, 目标字符串的第二个格式说明符会格式化该字符串后的第二个参数, 以此类推. 但是你可以更改这个顺序.

    To do this, place a number followed by a dollar ($) symbol between the % and the type specifier. For example:
    在 % 符和类型说明符之间插入一个 ($) 号. 如:

    // Displays "Australia comprises 10 territories and 6 states"
    printf( 'Australia comprises %2$d territories and %1$d states', 6, 10 );
    // 输出 "Australia comprises 10 territories and 6 states"
    printf( 'Australia comprises %2$d territories and %1$d states', 6, 10 );

    In the above example, the first format specifier is %2$d. This means: "Take the second argument after the format string and display it as a decimal integer". The second format specifier, %1$d, reads: "Take the first argument after the format string and display it as a decimal integer". So the arguments are used in a different order.
    在上面的例子中, 第一个格式说明符是 %2$d. 意即: "将目标字符串后的第二个参数作为十进制整数格式化". 第二个格式说明符 %1$d 即: "将目标字符串后的第一个参数作为十进制整数格式化". 这样, 参数便以不同与默认的顺序格式化.

    In the above example, the format string is enclosed by single quotes rather than double quotes. This prevents each dollar ($) symbol in the string from being interpreted as starting a PHP variable name.
    在上面的例子中, 格式字符串使用单引号而非双引号包围. 这样是为了阻止 ($) 符号被 PHP 解释为变量名.

Storing the result in a variable
保存格式化后的结果

    So what about sprintf()? This function is identical to printf(), except that rather than directly outputting the result, it returns it so that you can store it in a variable (or otherwise manipulate it). This is useful if you want to process the result before displaying it, or store it in a database. Here's an example:
    那 sprintf() 又是干嘛的呢? 这个函数和 printf() 只有一点不同: 它会将格式化后的结果返回, 而不是直接输出. 这样你就可以将结果赋给变量, 进行其他操作等. 如果你想要在输出它之前进行额外的处理, 或者保存到数据库等, 那这点会很有用. 下面是示例:

    $result = sprintf( "Australia comprises %d states and %d territories", 6, 10 );

    // Displays "Australia comprises 6 states and 10 territories"
    echo $result;

    $result = sprintf( "Australia comprises %d states and %d territories", 6, 10 );

    // 输出 "Australia comprises 6 states and 10 territories"
    echo $result;

    Other related functions include fprintf() for writing the result to a stream (such as a file), and vprintf()/vsprintf()/vfprintf(), which work with an array of values to format instead of an argument list.
    其他相关的函数包括 fprintf(), 用于将结果写到流(如文件), 还有 vprintf()/vsprintf()/vfprintf(), 它们使用一个数组参数, 而非参数列表.

    Written by Matt Doyle — ELATED's resident Web programming expert
    作者 Matt Doyle - Elated's 常驻 WEB 程序专家